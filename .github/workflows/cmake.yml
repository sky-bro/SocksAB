name: CMake

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # needs: check_commit_msg
    # if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
    strategy:
      matrix:
        qt_version: [5.15.0]
        platform: [ubuntu-16.04, macos-latest, windows-latest]
        arch: [x64]
        include:
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    # env:
    #   _QV2RAY_BUILD_INFO_: "Qv2ray built from Github Action"
    #   _QV2RAY_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        uses: actions/checkout@v2
      - name: Install Python 3.7 version
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"
          architecture: ${{ matrix.arch }}
      # - name: Restoring submodules
      #   run: git submodule update --init
      # =========================================================================================================
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.2
          arch: ${{ matrix.arch }}
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ runner.workspace }}/Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Installing Qt - ${{ matrix.arch }}
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      # =========================================================================================================
      - name: Cache Botan
        if: matrix.platform != 'macos-latest' && steps.cache-botan.outputs.cache-hit != 'true'
        id: cache-botan
        uses: actions/cache@v2
        with:
          path: botan-2.17.3/
          key: BotanCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Linux - Compile Botan
        if: matrix.platform == 'ubuntu-16.04'
        # if: matrix.platform == 'ubuntu-16.04' && steps.cache-botan.outputs.cache-hit != 'true'
        run: |
          wget -c https://github.com/randombit/botan/archive/refs/tags/2.17.3.tar.gz
          tar -xf 2.17.3.tar.gz
          cd botan-2.17.3/
          python3.7 ./configure.py --prefix=/usr
          make -j`nproc`

      # - name: macOS - Compile Botan
      #   if: matrix.platform == 'macos-latest' && steps.cache-botan.outputs.cache-hit != 'true'
      #   run: |
      #     wget -c https://github.com/randombit/botan/archive/refs/tags/2.17.3.tar.gz
      #     tar -xf 2.17.3.tar.gz
      #     cd botan-2.17.3/
      #     # export MACOSX_DEPLOYMENT_TARGET=10.10
      #     python configure.py --os=darwin --cc=clang --cpu=x64
      #     # ./configure.py --prefix=/usr
      #     sudo make -j`nproc`

      - name: Win - Compile Botan
        if: matrix.platform == 'windows-latest'
        # if: matrix.platform == 'windows-latest' && steps.cache-botan.outputs.cache-hit != 'true'
        run: |
          curl -OL https://github.com/randombit/botan/archive/refs/tags/2.17.3.tar.gz
          tar -xf 2.17.3.tar.gz
          cd botan-2.17.3/
          python configure.py --cc=msvc --os=windows
          nmake
          nmake check

      - name: Linux - ${{ matrix.qt_version }} - Build preparation - Install Packages
        if: matrix.platform == 'ubuntu-16.04'
        run: |
          # sudo add-apt-repository ppa:webispy/grpc
          # sudo add-apt-repository ppa:carsten-uppenbrink-net/openssl
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update -y
          sudo apt-get install gcc-7 g++-7 -y
          sudo apt install -y libgl-dev libx11-dev libxkbcommon-x11-dev libxcb-image0-dev libxcb-icccm4-dev libssl-dev libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
          sudo apt install ninja-build
          # install botan2
          cd botan-2.17.3/
          sudo make install
      
      # --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages
        if: matrix.platform == 'macos-latest'
        run: |
          # brew install protobuf grpc ninja pkg-config
          brew install ninja pkg-config botan
          # cd botan-2.17.3/
          # sudo make install
      # --------------------------------------------------------
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Setup Ninja
        if: matrix.platform == 'windows-latest'
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0   
      # - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
      #   shell: bash
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     curl -o ./libs/Qv2ray-deps-grpc-${{ matrix.arch }}-windows.7z -L https://github.com/Qv2ray/Qv2ray-deps/releases/download/release/Qv2ray-deps-grpc-${{ matrix.arch }}-windows.7z
      - name: Win-${{ matrix.arch }} - Build preparation - Install Packages
        if: matrix.platform == 'windows-latest'
        run: |
          cd botan-2.17.3/
          nmake install
      # ========================================================================================================= Generate MakeFile and Build

      - uses: actions/setup-node@v1
        if: matrix.platform == 'macos-latest'
        with:
          node-version: "12.x"
      - run: npm install -g appdmg
        if: matrix.platform == 'macos-latest'
      - name: macOS - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DUSE_DEPLOYQT=ON
          cmake --build . --parallel $(sysctl -n hw.logicalcpu)
          # only install Alice for now
          sudo cmake --install .
          appdmg ../Socks-Alice/assets/package_dmg.json ../Socks-Alice.dmg
      # --------------------------------------------------------
      - name: Windows - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'windows-latest'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./deployment -DCMAKE_BUILD_TYPE=Release -DUSE_DEPLOYQT=ON
          cmake --build . --parallel $(nproc)
          cmake --install .
          # ls * -R
      # --------------------------------------------------------
      - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
        if: matrix.platform == 'ubuntu-16.04'
        shell: bash
        env:
          CC: /usr/bin/gcc-7
          CXX: /usr/bin/g++-7
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./AppDir/usr -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel $(nproc)
          cmake --install .
      # ========================================================================================================= Deployments
      - name: Linux - ${{ matrix.qt_version }} - Generating AppImage
        if: matrix.platform == 'ubuntu-16.04'
        run: |
          cd build
          wget https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage
          chmod +x ./linuxdeployqt-6-x86_64.AppImage
          ./linuxdeployqt-6-x86_64.AppImage --appimage-extract
          cd AppDir
          # ls * -R
          wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/AppRun-patched-x86_64 -O AppRun
          chmod a+x AppRun
          mkdir -p ./usr/{lib,optional}/
          wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/exec-x86_64.so -O ./usr/optional/exec.so
          mkdir -p ./usr/optional/libstdc++/
          cp -fv /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ./usr/optional/libstdc++/
          mkdir -p ./usr/optional/libgcc_s/
          cp -fv /lib/x86_64-linux-gnu/libgcc_s.so.1 ./usr/optional/libgcc_s/
          # cp -fv /usr/lib/x86_64-linux-gnu/{libssl.so.1.1,libcrypto.so.1.1} ./usr/lib/
          # mkdir -p ./usr/plugins/platforminputcontexts/
          # cp -fv /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so ./usr/plugins/platforminputcontexts/
          cd ..
          cp AppDir AppDir2 -r
          rm AppDir/usr/bin/Socks-Bob
          rm AppDir/usr/share/applications/Socks-Bob.desktop
          rm AppDir2/usr/bin/Socks-Alice
          rm AppDir2/usr/share/applications/Socks-Alice.desktop
          squashfs-root/AppRun AppDir/usr/share/applications/Socks-Alice.desktop -appimage -no-strip -always-overwrite
          squashfs-root/AppRun AppDir2/usr/share/applications/Socks-Bob.desktop -appimage -no-strip -always-overwrite
          # ls * -R
          mv ./Socks-Alice*.AppImage ./Socks-Alice.AppImage
          mv ./Socks-Bob*.AppImage ./Socks-Bob.AppImage
      # - name: Linux - ${{ matrix.qt_version }} - Uploading artifact
      #   if: matrix.platform == 'ubuntu-16.04'
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: Qv2ray-${{ github.sha }}.linux-${{ matrix.arch }}.qt${{ matrix.qt_version }}.AppImage
      #     path: build/Qv2ray.AppImage
      - name: Linux - ${{ matrix.qt_version }} - Upload Socks-Alice to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'ubuntu-16.04' && matrix.qt_version == '5.15.0'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/Socks-Alice.AppImage
          asset_name: Socks-Alice.${{ steps.get_version.outputs.VERSION }}.linux-${{ matrix.arch }}.AppImage
          tag: ${{ github.ref }}
          overwrite: true
      - name: Linux - ${{ matrix.qt_version }} - Upload Socks-Bob to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'ubuntu-16.04' && matrix.qt_version == '5.15.0'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/Socks-Bob.AppImage
          asset_name: Socks-Bob.${{ steps.get_version.outputs.VERSION }}.linux-${{ matrix.arch }}.AppImage
          tag: ${{ github.ref }}
          overwrite: true
      # --------------------------------------------------------
      # - name: macOS - ${{ matrix.qt_version }} - Uploading Artifact
      #   if: matrix.platform == 'macos-latest'
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: Qv2ray-${{ github.sha }}.macOS-${{ matrix.arch }}.qt${{ matrix.qt_version }}.dmg
      #     path: Qv2ray.dmg
      - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'macos-latest' && matrix.qt_version == '5.15.0'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: Socks-Alice.dmg
          asset_name: Socks-Alice-${{ steps.get_version.outputs.VERSION }}.macOS-${{ matrix.arch }}.dmg
          tag: ${{ github.ref }}
          overwrite: true
      # # --------------------------------------------------------
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Create 7z Release
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./build/deployment/alice/
          pathTarget: ./release-alice.7z
      # - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Uploading artifact
      #   if: matrix.platform == 'windows-latest'
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: Socks-Alice-${{ github.sha }}.Windows-${{ matrix.arch }}.qt${{ matrix.qt_version }}.7z
      #     path: release-alice.7z
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'windows-latest' && matrix.qt_version == '5.15.0'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release-alice.7z
          asset_name: Socks-Alice.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}.7z
          tag: ${{ github.ref }}
          overwrite: true
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Create 7z Release
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./build/deployment/bob/
          pathTarget: ./release-bob.7z
      # - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Uploading artifact
      #   if: matrix.platform == 'windows-latest'
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: Socks-Alice-${{ github.sha }}.Windows-${{ matrix.arch }}.qt${{ matrix.qt_version }}.7z
      #     path: release-alice.7z
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'windows-latest' && matrix.qt_version == '5.15.0'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release-bob.7z
          asset_name: Socks-Bob.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}.7z
          tag: ${{ github.ref }}
          overwrite: true
